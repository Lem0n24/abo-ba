{"version":3,"sources":["prompInstall.js","logo.svg","App.js","serviceWorkerRegistration.js","index.js","utils/fateEffect.js"],"names":["PromptInstall","useEffect","PwaInstallPrompt","condition","expires","show_after","className","type","src","alt","viewBox","xmlns","fill","d","App","logo","href","target","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","addEventListener","event","data","reload","register","then","registration","setInterval","update","res","console","info","timeoutUpdate","onupdatefound","installingWorker","installing","onstatechange","state","controller","ons","notification","confirm","title","buttonLabels","postMessage","log","onUpdate","onSuccess","catch","error","root","document","getElementById","disableAutoStyling","ready","render","id","element","classList","add","setTimeout","remove","fateEffect","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e6ba2d38.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport PwaInstallPrompt from 'pwa-install-prompt';\nimport 'pwa-install-prompt/style.css';\n\nconst PromptInstall = () => {\n  useEffect(() => {\n    new PwaInstallPrompt('.pwa-install-prompt__container', {\n      condition: null,\n      expires: 180,\n      show_after: 90,\n    });\n  }, []);\n\n  return (\n    <div className=\"pwa-install-prompt__container\">\n      <button className=\"pwa-install-prompt__overlay\" type=\"button\">\n        Close\n      </button>\n      <div className=\"pwa-install-prompt\">\n        <div className=\"pwa-install-prompt__icon__container\">\n          <img\n            className=\"pwa-install-prompt__icon\"\n            src=\"apple-touch-icon.png\"\n            alt=\"Установите на домашний экран\"\n          />\n        </div>\n        <div className=\"pwa-install-prompt__content\">\n          <h3 className=\"pwa-install-prompt__title\">Установка</h3>\n          <p className=\"pwa-install-prompt__text\">\n            Установите приложение на домашний экран для быстрого и удобного доступа к своим данным\n          </p>\n          <p className=\"pwa-install-prompt__guide\">\n            <span>Нажмите</span>\n            <svg className=\"pwa-install-prompt__guide__icon\" viewBox=\"0 0 128 128\" xmlns=\"http://www.w3.org/2000/svg\">\n              <title>Поделиться</title>\n              <path\n                fill=\"#007AFF\"\n                d=\"M48.883,22.992L61.146,10.677L61.146,78.282C61.146,80.005 62.285,81.149 64,81.149C65.715,81.149 66.854,80.005 66.854,78.282L66.854,10.677L79.117,22.992C79.693,23.57 80.256,23.853 81.114,23.853C81.971,23.853 82.534,23.57 83.11,22.992C84.25,21.848 84.25,20.125 83.11,18.981L65.997,1.794C65.715,1.511 65.421,1.215 65.139,1.215C64.563,0.932 63.718,0.932 62.861,1.215C62.579,1.498 62.285,1.498 62.003,1.794L44.89,18.981C43.75,20.125 43.75,21.848 44.89,22.992C46.029,24.149 47.744,24.149 48.883,22.992ZM103.936,35.32L81.114,35.32L81.114,41.053L103.936,41.053L103.936,121.27L24.064,121.27L24.064,41.053L46.886,41.053L46.886,35.32L24.064,35.32C20.928,35.32 18.355,37.904 18.355,41.053L18.355,121.27C18.355,124.419 20.928,127.003 24.064,127.003L103.936,127.003C107.072,127.003 109.645,124.419 109.645,121.27L109.645,41.053C109.645,37.891 107.072,35.32 103.936,35.32Z\"\n              />\n            </svg>\n          </p>\n          <p className=\"pwa-install-prompt__guide\">и добавить на экран &quot;Домой&quot;</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PromptInstall;\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import ons from 'onsenui'\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n// When the user asks to refresh the UI, we'll need to reload the window\nnavigator.serviceWorker.addEventListener('message', event => {\n  if (!event.data) {\n    return\n  }\n    switch (event.data) {\n      case 'reload-window':\n        window.location.reload()\n         break\n      \n    default:\n      // NOOP\n       break\n    }\n  })\n\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      //autoupdate PWA\n      setInterval(() => {\n        registration.update().then(res => console.info('FORCE UPDATE - resolve'))\n      }, config.timeoutUpdate)      \n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              ons.notification\n                .confirm(`Доступна новая версия приложения.`, {\n                  title: 'Обновление приложения',\n                  buttonLabels: ['Отмена', 'Обновить'],\n                })\n                .then(res => {\n                  if (res === 1) {\n                    installingWorker.postMessage({ type: 'SKIP_WAITING' })\n                  }\n              });\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ons from 'onsenui'\nimport { render } from 'react-dom';\nimport PrompInstall from './prompInstall';\n\nimport {fateEffect} from 'utils/fateEffect'\n\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport 'onsenui/css/onsenui.css';\nimport 'onsenui/css/onsen-css-components.css';\n\nconst root = document.getElementById('root');\n\nons.disableAutoStyling();\n\nons.ready(() => {\n  render(\n    <>\n      <App />\n      <PrompInstall />\n    </>,\n    root\n    );\n\n    fateEffect('root-loader')\n})\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register({timeoutUpdate: 10000 });\n","const fateEffect = (id )=> {\r\n  const element = document.getElementById('root-loader');\r\n\r\n  if (!element) {\r\n    return;\r\n  }\r\n\r\n  element.classList.add('loader-fade-effect');\r\n\r\n  setTimeout(() => {\r\n    element.remove();\r\n  }, 500);\r\n}\r\nexport {\r\n  fateEffect\r\n} "],"sourceRoot":""}