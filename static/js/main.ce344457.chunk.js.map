{"version":3,"sources":["containers/Home/Home.jsx","routes.js","components/App/App.jsx","components/Loader/Loader.jsx","components/ErrorBoundary/ErrorBoundary.jsx","serviceWorkerRegistration.js","index.js","utils/fateEffect.js"],"names":["Home","navigator","params","ROUTES","home","title","component","key","initRoute","uniqKey","v1","getRoute","App","navigatorEl","useRef","ref","renderPage","route","initialRoute","animation","makeStyles","root","position","display","bottom","color","opacity","top","animationDuration","left","circle","strokeLinecap","ErrorBoundary","props","state","hasError","error","info","console","log","this","setState","children","menu","document","getElementsByClassName","remove","className","role","aria-label","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","addEventListener","event","data","reload","register","then","registration","setInterval","update","res","timeoutUpdate","onupdatefound","installingWorker","installing","onstatechange","controller","ons","notification","confirm","buttonLabels","postMessage","type","onUpdate","onSuccess","catch","getElementById","disableAutoStyling","ready","render","id","element","classList","add","setTimeout","fateEffect","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ce344457.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Home = ({ navigator, params }) => {\r\n  return (\r\n    <h1>\r\n      This is Home\r\n    </h1>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import {\r\n  Home,\r\n} from 'containers';\r\n\r\nimport { v1 } from 'uuid';\r\n\r\nexport const initialRouteKey = 'home';\r\n\r\nexport const ROUTES = {\r\n  home: {\r\n    title: 'Расписание занятий',\r\n    component: Home,\r\n    key: 'home',\r\n  }\r\n};\r\n\r\nexport const getRoute = (key, params = {}) => (\r\n  { ...ROUTES[key], params, uniqKey: v1() }\r\n);\r\n","import React, { useRef } from 'react';\r\nimport { Navigator } from 'react-onsenui';\r\n\r\nimport { ErrorBoundary } from 'components';\r\nimport { getRoute, initialRouteKey } from 'routes';\r\nimport 'styles';\r\n\r\nconst initRoute = getRoute('home');\r\n\r\nconst App = () => {\r\n  const navigatorEl = useRef(null);\r\n\r\n  const renderPage = (route, navigator) => {\r\n    return (\r\n      <ErrorBoundary key={route.uniqKey}>\r\n        <route.component navigator={navigator} params={route.params} />\r\n      </ErrorBoundary>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Navigator\r\n      ref={navigatorEl}\r\n      renderPage={renderPage}\r\n      initialRoute={initRoute}\r\n      animation=\"slide-ios\"\r\n    />\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    position: 'relative',\r\n    display: 'flex',\r\n  },\r\n  bottom: {\r\n    color: 'green',\r\n    opacity: 0.3,\r\n  },\r\n  top: {\r\n    color: 'green',\r\n    opacity: 0.9,\r\n    animationDuration: '450ms',\r\n    position: 'absolute',\r\n    left: 0,\r\n  },\r\n  circle: {\r\n    strokeLinecap: 'round',\r\n  },\r\n}));\r\n\r\nconst Loader = ({ size = 50, color = '#26CA42' }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CircularProgress\r\n        variant=\"determinate\"\r\n        className={classes.bottom}\r\n        size={size}\r\n        thickness={4}\r\n        value={100}\r\n      />\r\n      <CircularProgress\r\n        variant=\"indeterminate\"\r\n        disableShrink\r\n        className={classes.top}\r\n        style={{ color }}\r\n        classes={{\r\n          circle: classes.circle,\r\n        }}\r\n        size={size}\r\n        thickness={4}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { Component, ErrorInfo } from 'react';\r\n\r\nimport './ErrorBoundary.less';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    console.log(error, info);\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    const { hasError } = this.state;\r\n\r\n    if (hasError) {\r\n      const menu = document.getElementsByClassName('navigation-menu')[0];\r\n\r\n      if (menu) {\r\n        menu.remove();\r\n      }\r\n\r\n      return (\r\n        <div className=\"error-boundary\">\r\n          <span className=\"error-boundary__icon\" role=\"img\" aria-label=\"Something wrong!\">\r\n            &#128561;\r\n          </span>\r\n          <h3 className=\"error-boundary__title\">Что-то пошло не так!</h3>\r\n          <h4 className=\"error-boundary__subtitle\">но мы уже над этим работаем</h4>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import ons from 'onsenui'\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n// When the user asks to refresh the UI, we'll need to reload the window\nnavigator.serviceWorker.addEventListener('message', event => {\n  if (!event.data) {\n    return\n  }\n    switch (event.data) {\n      case 'reload-window':\n        window.location.reload()\n         break\n      \n    default:\n      // NOOP\n       break\n    }\n  })\n\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      //autoupdate PWA\n      setInterval(() => {\n        registration.update().then(res => console.info('FORCE UPDATE - resolve'))\n      }, config.timeoutUpdate)      \n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              ons.notification\n                .confirm(`Доступна новая версия приложения.`, {\n                  title: 'Обновление приложения',\n                  buttonLabels: ['Отмена', 'Обновить'],\n                })\n                .then(res => {\n                  if (res === 1) {\n                    installingWorker.postMessage({ type: 'SKIP_WAITING' })\n                  }\n              });\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ons from 'onsenui'\r\nimport { render } from 'react-dom';\r\nimport PrompInstall from './prompInstall';\r\n\r\nimport {fateEffect} from 'utils/fateEffect'\r\n\r\nimport { App } from 'components'\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nconst root = document.getElementById('root');\r\n\r\nons.disableAutoStyling();\r\n\r\nons.ready(() => {\r\n  render(<App />, root);\r\n\r\n  fateEffect('root-loader')\r\n})\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register({timeoutUpdate: 10000 });\r\n","const fateEffect = (id )=> {\r\n  const element = document.getElementById('root-loader');\r\n\r\n  if (!element) {\r\n    return;\r\n  }\r\n\r\n  element.classList.add('loader-fade-effect');\r\n\r\n  setTimeout(() => {\r\n    element.remove();\r\n  }, 500);\r\n}\r\nexport {\r\n  fateEffect\r\n} "],"sourceRoot":""}